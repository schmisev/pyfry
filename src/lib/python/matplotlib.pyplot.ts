import { type Completion } from "@codemirror/autocomplete";
// regex: \n\n(.*)\((.*)((?:, \*|\[).*)\)\n\n(.*)
// replace: \n{ label: `$1($2)`, displayLabel: `$1($2$3)`, info: `$1($2$3):\\n$4`\n

export const pltCompletions: Completion[] = [
{label: `plt.acorr(x)`, displayLabel: `plt.acorr(x, *[, data])`, info: "acorr(x, *[, data]):\nPlot the autocorrelation of x.", type: `function`},
{label: `plt.angle_spectrum(x)`, displayLabel: `plt.angle_spectrum(x[, Fs, Fc, window, pad_to, ...])`, info: "angle_spectrum(x[, Fs, Fc, window, pad_to, ...]):\nPlot the angle spectrum.", type: `function`},
{label: `plt.annotate(text, xy, *args)`, displayLabel: `plt.annotate(text, xy, *args, **kwargs)`, info: "annotate(text, xy, *args, **kwargs):\nAnnotate the point xy with text text.", type: `function`},
{label: `plt.arrow(x, y, dx, dy)`, displayLabel: `plt.arrow(x, y, dx, dy, **kwargs)`, info: "arrow(x, y, dx, dy, **kwargs):\nAdd an arrow to the Axes.", type: `function`},
{label: `plt.autoscale()`, displayLabel: `plt.autoscale([enable, axis, tight])`, info: "autoscale([enable, axis, tight]):\nAutoscale the axis view to the data (toggle).", type: `function`},
{label: `plt.autumn()`, displayLabel: `plt.autumn()`, info: "autumn():\nSet the colormap to 'autumn'.", type: `function`},
{label: `plt.axes()`, displayLabel: `plt.axes([arg])`, info: "axes([arg]):\nAdd an axes to the current figure and make it the current axes.", type: `function`},
{label: `plt.axhline()`, displayLabel: `plt.axhline([y, xmin, xmax])`, info: "axhline([y, xmin, xmax]):\nAdd a horizontal line across the Axes.", type: `function`},
{label: `plt.axhspan(ymin, ymax)`, displayLabel: `plt.axhspan(ymin, ymax[, xmin, xmax])`, info: "axhspan(ymin, ymax[, xmin, xmax]):\nAdd a horizontal span (rectangle) across the Axes.", type: `function`},
{label: `plt.axis()`, displayLabel: `plt.axis(*args[, emit])`, info: "axis(*args[, emit]):\nConvenience method to get or set some axis properties.", type: `function`},
{label: `plt.axline(xy1)`, displayLabel: `plt.axline(xy1[, xy2, slope])`, info: "axline(xy1[, xy2, slope]):\nAdd an infinitely long straight line.", type: `function`},
{label: `plt.axvline()`, displayLabel: `plt.axvline([x, ymin, ymax])`, info: "axvline([x, ymin, ymax]):\nAdd a vertical line across the Axes.", type: `function`},
{label: `plt.axvspan(xmin, xmax)`, displayLabel: `plt.axvspan(xmin, xmax[, ymin, ymax])`, info: "axvspan(xmin, xmax[, ymin, ymax]):\nAdd a vertical span (rectangle) across the Axes.", type: `function`},
{label: `plt.bar(x, height)`, displayLabel: `plt.bar(x, height[, width, bottom, align, data])`, info: "bar(x, height[, width, bottom, align, data]):\nMake a bar plot.", type: `function`},
{label: `plt.bar_label(container)`, displayLabel: `plt.bar_label(container[, labels, fmt, ...])`, info: "bar_label(container[, labels, fmt, ...]):\nLabel a bar plot.", type: `function`},
{label: `plt.barbs()`, displayLabel: `plt.barbs(*args[, data])`, info: "barbs(*args[, data]):\nPlot a 2D field of barbs.", type: `function`},
{label: `plt.barh(y, width)`, displayLabel: `plt.barh(y, width[, height, left, align])`, info: "barh(y, width[, height, left, align]):\nMake a horizontal bar plot.", type: `function`},
{label: `plt.bone()`, displayLabel: `plt.bone()`, info: "bone():\nSet the colormap to 'bone'.", type: `function`},
{label: `plt.box()`, displayLabel: `plt.box([on])`, info: "box([on]):\nTurn the axes box on or off on the current axes.", type: `function`},
{label: `plt.boxplot(x)`, displayLabel: `plt.boxplot(x[, notch, sym, vert, whis, ...])`, info: "boxplot(x[, notch, sym, vert, whis, ...]):\nDraw a box and whisker plot.", type: `function`},
{label: `plt.broken_barh(xranges, yrange)`, displayLabel: `plt.broken_barh(xranges, yrange, *[, data])`, info: "broken_barh(xranges, yrange, *[, data]):\nPlot a horizontal sequence of rectangles.", type: `function`},
{label: `plt.cla()`, displayLabel: `plt.cla()`, info: "cla():\nClear the current axes.", type: `function`},
{label: `plt.clabel(CS)`, displayLabel: `plt.clabel(CS[, levels])`, info: "clabel(CS[, levels]):\nLabel a contour plot.", type: `function`},
{label: `plt.clf()`, displayLabel: `plt.clf()`, info: "clf():\nClear the current figure.", type: `function`},
{label: `plt.clim()`, displayLabel: `plt.clim([vmin, vmax])`, info: "clim([vmin, vmax]):\nSet the color limits of the current image.", type: `function`},
{label: `plt.close()`, displayLabel: `plt.close([fig])`, info: "close([fig]):\nClose a figure window.", type: `function`},
{label: `plt.cohere(x, y)`, displayLabel: `plt.cohere(x, y[, NFFT, Fs, Fc, detrend, ...])`, info: "cohere(x, y[, NFFT, Fs, Fc, detrend, ...]):\nPlot the coherence between x and y.", type: `function`},
{label: `plt.colorbar()`, displayLabel: `plt.colorbar([mappable, cax, ax])`, info: "colorbar([mappable, cax, ax]):\nAdd a colorbar to a plot.", type: `function`},
{label: `plt.connect(s, func)`, displayLabel: `plt.connect(s, func)`, info: "connect(s, func):\nBind function func to event s.", type: `function`},
{label: `plt.contour()`, displayLabel: `plt.contour(*args[, data])`, info: "contour(*args[, data]):\nPlot contour lines.", type: `function`},
{label: `plt.contourf()`, displayLabel: `plt.contourf(*args[, data])`, info: "contourf(*args[, data]):\nPlot filled contours.", type: `function`},
{label: `plt.cool()`, displayLabel: `plt.cool()`, info: "cool():\nSet the colormap to 'cool'.", type: `function`},
{label: `plt.copper()`, displayLabel: `plt.copper()`, info: "copper():\nSet the colormap to 'copper'.", type: `function`},
{label: `plt.csd(x, y)`, displayLabel: `plt.csd(x, y[, NFFT, Fs, Fc, detrend, window, ...])`, info: "csd(x, y[, NFFT, Fs, Fc, detrend, window, ...]):\nPlot the cross-spectral density.", type: `function`},
{label: `plt.delaxes()`, displayLabel: `plt.delaxes([ax])`, info: "delaxes([ax]):\nRemove an Axes (defaulting to the current axes) from its figure.", type: `function`},
{label: `plt.disconnect(cid)`, displayLabel: `plt.disconnect(cid)`, info: "disconnect(cid):\nDisconnect the callback with id cid.", type: `function`},
{label: `plt.draw()`, displayLabel: `plt.draw()`, info: "draw():\nRedraw the current figure.", type: `function`},
{label: `plt.draw_if_interactive()`, displayLabel: `plt.draw_if_interactive()`, info: "draw_if_interactive():\nRedraw the current figure if in interactive mode.", type: `function`},
{label: `plt.errorbar(x, y)`, displayLabel: `plt.errorbar(x, y[, yerr, xerr, fmt, ecolor, ...])`, info: "errorbar(x, y[, yerr, xerr, fmt, ecolor, ...]):\nPlot y versus x as lines and/or markers with attached errorbars.", type: `function`},
{label: `plt.eventplot(positions)`, displayLabel: `plt.eventplot(positions[, orientation, ...])`, info: "eventplot(positions[, orientation, ...]):\nPlot identical parallel lines at the given positions.", type: `function`},
{label: `plt.figimage(X)`, displayLabel: `plt.figimage(X[, xo, yo, alpha, norm, cmap, ...])`, info: "figimage(X[, xo, yo, alpha, norm, cmap, ...]):\nAdd a non-resampled image to the figure.", type: `function`},
{label: `plt.figlegend()`, displayLabel: `plt.figlegend(*args, **kwargs)`, info: "figlegend(*args, **kwargs):\nPlace a legend on the figure.", type: `function`},
{label: `plt.fignum_exists(num)`, displayLabel: `plt.fignum_exists(num)`, info: "fignum_exists(num):\nReturn whether the figure with the given id exists.", type: `function`},
{label: `plt.figtext(x, y, s)`, displayLabel: `plt.figtext(x, y, s[, fontdict])`, info: "figtext(x, y, s[, fontdict]):\nAdd text to figure.", type: `function`},
{label: `plt.figure()`, displayLabel: `plt.figure([num, figsize, dpi, facecolor, ...])`, info: "figure([num, figsize, dpi, facecolor, ...]):\nCreate a new figure, or activate an existing figure.", type: `function`},
{label: `plt.fill()`, displayLabel: `plt.fill(*args[, data])`, info: "fill(*args[, data]):\nPlot filled polygons.", type: `function`},
{label: `plt.fill_between(x, y1)`, displayLabel: `plt.fill_between(x, y1[, y2, where, ...])`, info: "fill_between(x, y1[, y2, where, ...]):\nFill the area between two horizontal curves.", type: `function`},
{label: `plt.fill_betweenx(y, x1)`, displayLabel: `plt.fill_betweenx(y, x1[, x2, where, step, ...])`, info: "fill_betweenx(y, x1[, x2, where, step, ...]):\nFill the area between two vertical curves.", type: `function`},
{label: `plt.findobj()`, displayLabel: `plt.findobj([o, match, include_self])`, info: "findobj([o, match, include_self]):\nFind artist objects.", type: `function`},
{label: `plt.flag()`, displayLabel: `plt.flag()`, info: "flag():\nSet the colormap to 'flag'.", type: `function`},
{label: `plt.gca(*)`, displayLabel: `plt.gca(**kwargs)`, info: "gca(**kwargs):\nGet the current Axes.", type: `function`},
{label: `plt.gcf()`, displayLabel: `plt.gcf()`, info: "gcf():\nGet the current figure.", type: `function`},
{label: `plt.gci()`, displayLabel: `plt.gci()`, info: "gci():\nGet the current colorable artist.", type: `function`},
{label: `plt.get(obj, *args)`, displayLabel: `plt.get(obj, *args, **kwargs)`, info: "get(obj, *args, **kwargs):\nReturn the value of an Artist's property, or print all of them.", type: `function`},
{label: `plt.get_current_fig_manager()`, displayLabel: `plt.get_current_fig_manager()`, info: "get_current_fig_manager():\nReturn the figure manager of the current figure.", type: `function`},
{label: `plt.get_figlabels()`, displayLabel: `plt.get_figlabels()`, info: "get_figlabels():\nReturn a list of existing figure labels.", type: `function`},
{label: `plt.get_fignums()`, displayLabel: `plt.get_fignums()`, info: "get_fignums():\nReturn a list of existing figure numbers.", type: `function`},
{label: `plt.get_plot_commands()`, displayLabel: `plt.get_plot_commands()`, info: "get_plot_commands():\nGet a sorted list of all of the plotting commands.", type: `function`},
{label: `plt.getp(obj, *args)`, displayLabel: `plt.getp(obj, *args, **kwargs)`, info: "getp(obj, *args, **kwargs):\nReturn the value of an Artist's property, or print all of them.", type: `function`},
{label: `plt.ginput()`, displayLabel: `plt.ginput([n, timeout, show_clicks, mouse_add, ...])`, info: "ginput([n, timeout, show_clicks, mouse_add, ...]):\nBlocking call to interact with a figure.", type: `function`},
{label: `plt.gray()`, displayLabel: `plt.gray()`, info: "gray():\nSet the colormap to 'gray'.", type: `function`},
{label: `plt.grid()`, displayLabel: `plt.grid([visible, which, axis])`, info: "grid([visible, which, axis]):\nConfigure the grid lines.", type: `function`},
{label: `plt.hexbin(x, y)`, displayLabel: `plt.hexbin(x, y[, C, gridsize, bins, xscale, ...])`, info: "hexbin(x, y[, C, gridsize, bins, xscale, ...]):\nMake a 2D hexagonal binning plot of points x, y.", type: `function`},
{label: `plt.hist(x)`, displayLabel: `plt.hist(x[, bins, range, density, weights, ...])`, info: "hist(x[, bins, range, density, weights, ...]):\nPlot a histogram.", type: `function`},
{label: `plt.hist2d(x, y)`, displayLabel: `plt.hist2d(x, y[, bins, range, density, ...])`, info: "hist2d(x, y[, bins, range, density, ...]):\nMake a 2D histogram plot.", type: `function`},
{label: `plt.hlines(y, xmin, xmax)`, displayLabel: `plt.hlines(y, xmin, xmax[, colors, linestyles, ...])`, info: "hlines(y, xmin, xmax[, colors, linestyles, ...]):\nPlot horizontal lines at each y from xmin to xmax.", type: `function`},
{label: `plt.hot()`, displayLabel: `plt.hot()`, info: "hot():\nSet the colormap to 'hot'.", type: `function`},
{label: `plt.hsv()`, displayLabel: `plt.hsv()`, info: "hsv():\nSet the colormap to 'hsv'.", type: `function`},
{label: `plt.imread(fname)`, displayLabel: `plt.imread(fname[, format])`, info: "imread(fname[, format]):\nRead an image from a file into an array.", type: `function`},
{label: `plt.imsave(fname, arr)`, displayLabel: `plt.imsave(fname, arr, **kwargs)`, info: "imsave(fname, arr, **kwargs):\nSave an array as an image file.", type: `function`},
{label: `plt.imshow(X)`, displayLabel: `plt.imshow(X[, cmap, norm, aspect, ...])`, info: "imshow(X[, cmap, norm, aspect, ...]):\nDisplay data as an image, i.e., on a 2D regular raster.", type: `function`},
{label: `plt.inferno()`, displayLabel: `plt.inferno()`, info: "inferno():\nSet the colormap to 'inferno'.", type: `function`},
{label: `plt.install_repl_displayhook()`, displayLabel: `plt.install_repl_displayhook()`, info: "install_repl_displayhook():\nInstall a repl display hook so that any stale figure are automatically redrawn when control is returned to the repl.", type: `function`},
{label: `plt.ioff()`, displayLabel: `plt.ioff()`, info: "ioff():\nDisable interactive mode.", type: `function`},
{label: `plt.ion()`, displayLabel: `plt.ion()`, info: "ion():\nEnable interactive mode.", type: `function`},
{label: `plt.isinteractive()`, displayLabel: `plt.isinteractive()`, info: "isinteractive():\nReturn whether plots are updated after every plotting command.", type: `function`},
{label: `plt.jet()`, displayLabel: `plt.jet()`, info: "jet():\nSet the colormap to 'jet'.", type: `function`},
{label: `plt.legend()`, displayLabel: `plt.legend(*args, **kwargs)`, info: "legend(*args, **kwargs):\nPlace a legend on the Axes.", type: `function`},
{label: `plt.locator_params()`, displayLabel: `plt.locator_params([axis, tight])`, info: "locator_params([axis, tight]):\nControl behavior of major tick locators.", type: `function`},
{label: `plt.loglog()`, displayLabel: `plt.loglog(*args, **kwargs)`, info: "loglog(*args, **kwargs):\nMake a plot with log scaling on both the x and y axis.", type: `function`},
{label: `plt.magma()`, displayLabel: `plt.magma()`, info: "magma():\nSet the colormap to 'magma'.", type: `function`},
{label: `plt.magnitude_spectrum(x)`, displayLabel: `plt.magnitude_spectrum(x[, Fs, Fc, window, ...])`, info: "magnitude_spectrum(x[, Fs, Fc, window, ...]):\nPlot the magnitude spectrum.", type: `function`},
{label: `plt.margins(*margins)`, displayLabel: `plt.margins(*margins[, x, y, tight])`, info: "margins(*margins[, x, y, tight]):\nSet or retrieve autoscaling margins.", type: `function`},
{label: `plt.matshow(A)`, displayLabel: `plt.matshow(A[, fignum])`, info: "matshow(A[, fignum]):\nDisplay an array as a matrix in a new figure window.", type: `function`},
{label: `plt.minorticks_off()`, displayLabel: `plt.minorticks_off()`, info: "minorticks_off():\nRemove minor ticks from the Axes.", type: `function`},
{label: `plt.minorticks_on()`, displayLabel: `plt.minorticks_on()`, info: "minorticks_on():\nDisplay minor ticks on the Axes.", type: `function`},
{label: `plt.new_figure_manager(num, *args)`, displayLabel: `plt.new_figure_manager(num, *args, **kwargs)`, info: "new_figure_manager(num, *args, **kwargs):\nCreate a new figure manager instance.", type: `function`},
{label: `plt.nipy_spectral()`, displayLabel: `plt.nipy_spectral()`, info: "nipy_spectral():\nSet the colormap to 'nipy_spectral'.", type: `function`},
{label: `plt.pause(interval)`, displayLabel: `plt.pause(interval)`, info: "pause(interval):\nRun the GUI event loop for interval seconds.", type: `function`},
{label: `plt.pcolor()`, displayLabel: `plt.pcolor(*args[, shading, alpha, norm, cmap, ...])`, info: "pcolor(*args[, shading, alpha, norm, cmap, ...]):\nCreate a pseudocolor plot with a non-regular rectangular grid.", type: `function`},
{label: `plt.pcolormesh()`, displayLabel: `plt.pcolormesh(*args[, alpha, norm, cmap, vmin, ...])`, info: "pcolormesh(*args[, alpha, norm, cmap, vmin, ...]):\nCreate a pseudocolor plot with a non-regular rectangular grid.", type: `function`},
{label: `plt.phase_spectrum(x)`, displayLabel: `plt.phase_spectrum(x[, Fs, Fc, window, pad_to, ...])`, info: "phase_spectrum(x[, Fs, Fc, window, pad_to, ...]):\nPlot the phase spectrum.", type: `function`},
{label: `plt.pie(x)`, displayLabel: `plt.pie(x[, explode, labels, colors, autopct, ...])`, info: "pie(x[, explode, labels, colors, autopct, ...]):\nPlot a pie chart.", type: `function`},
{label: `plt.pink()`, displayLabel: `plt.pink()`, info: "pink():\nSet the colormap to 'pink'.", type: `function`},
{label: `plt.plasma()`, displayLabel: `plt.plasma()`, info: "plasma():\nSet the colormap to 'plasma'.", type: `function`},
{label: `plt.plot()`, displayLabel: `plt.plot(*args[, scalex, scaley, data])`, info: "plot(*args[, scalex, scaley, data]):\nPlot y versus x as lines and/or markers.", type: `function`},
{label: `plt.plot_date(x, y)`, displayLabel: `plt.plot_date(x, y[, fmt, tz, xdate, ydate, data])`, info: "plot_date(x, y[, fmt, tz, xdate, ydate, data]):\nPlot coercing the axis to treat floats as dates.", type: `function`},
{label: `plt.polar()`, displayLabel: `plt.polar(*args, **kwargs)`, info: "polar(*args, **kwargs):\nMake a polar plot.", type: `function`},
{label: `plt.prism()`, displayLabel: `plt.prism()`, info: "prism():\nSet the colormap to 'prism'.", type: `function`},
{label: `plt.psd(x)`, displayLabel: `plt.psd(x[, NFFT, Fs, Fc, detrend, window, ...])`, info: "psd(x[, NFFT, Fs, Fc, detrend, window, ...]):\nPlot the power spectral density.", type: `function`},
{label: `plt.quiver()`, displayLabel: `plt.quiver(*args[, data])`, info: "quiver(*args[, data]):\nPlot a 2D field of arrows.", type: `function`},
{label: `plt.quiverkey(Q, X, Y, U, label)`, displayLabel: `plt.quiverkey(Q, X, Y, U, label, **kwargs)`, info: "quiverkey(Q, X, Y, U, label, **kwargs):\nAdd a key to a quiver plot.", type: `function`},
{label: `plt.rc(group)`, displayLabel: `plt.rc(group, **kwargs)`, info: "rc(group, **kwargs):\nSet the current rcParams. group is the grouping for the rc, e.g., for lines.linewidth the group is lines, for axes.facecolor, the group is axes, and so on. Group may also be a list or tuple of group names, e.g., (xtick, ytick). kwargs is a dictionary attribute name/value pairs, e.g.,::.", type: `function`},
{label: `plt.rc_context()`, displayLabel: `plt.rc_context([rc, fname])`, info: "rc_context([rc, fname]):\nReturn a context manager for temporarily changing rcParams.", type: `function`},
{label: `plt.rcdefaults()`, displayLabel: `plt.rcdefaults()`, info: "rcdefaults():\nRestore the rcParams from Matplotlib's internal default style.", type: `function`},
{label: `plt.rgrids()`, displayLabel: `plt.rgrids([radii, labels, angle, fmt])`, info: "rgrids([radii, labels, angle, fmt]):\nGet or set the radial gridlines on the current polar plot.", type: `function`},
{label: `plt.savefig()`, displayLabel: `plt.savefig(*args, **kwargs)`, info: "savefig(*args, **kwargs):\nSave the current figure.", type: `function`},
{label: `plt.sca(ax)`, displayLabel: `plt.sca(ax)`, info: "sca(ax):\nSet the current Axes to ax and the current Figure to the parent of ax.", type: `function`},
{label: `plt.scatter(x, y)`, displayLabel: `plt.scatter(x, y[, s, c, marker, cmap, norm, ...])`, info: "scatter(x, y[, s, c, marker, cmap, norm, ...]):\nA scatter plot of y vs.", type: `function`},
{label: `plt.sci(im)`, displayLabel: `plt.sci(im)`, info: "sci(im):\nSet the current image.", type: `function`},
{label: `plt.semilogx()`, displayLabel: `plt.semilogx(*args, **kwargs)`, info: "semilogx(*args, **kwargs):\nMake a plot with log scaling on the x axis.", type: `function`},
{label: `plt.semilogy()`, displayLabel: `plt.semilogy(*args, **kwargs)`, info: "semilogy(*args, **kwargs):\nMake a plot with log scaling on the y axis.", type: `function`},
{label: `plt.set_cmap(cmap)`, displayLabel: `plt.set_cmap(cmap)`, info: "set_cmap(cmap):\nSet the default colormap, and applies it to the current image if any.", type: `function`},
{label: `plt.set_loglevel()`, displayLabel: `plt.set_loglevel(*args, **kwargs)`, info: "set_loglevel(*args, **kwargs):\nSet Matplotlib's root logger and root logger handler level, creating the handler if it does not exist yet.", type: `function`},
{label: `plt.setp(obj, *args)`, displayLabel: `plt.setp(obj, *args, **kwargs)`, info: "setp(obj, *args, **kwargs):\nSet one or more properties on an Artist, or list allowed values.", type: `function`},
{label: `plt.show(*)`, displayLabel: `plt.show(*[, block])`, info: "show(*[, block]):\nDisplay all open figures.", type: `function`},
{label: `plt.specgram(x)`, displayLabel: `plt.specgram(x[, NFFT, Fs, Fc, detrend, window, ...])`, info: "specgram(x[, NFFT, Fs, Fc, detrend, window, ...]):\nPlot a spectrogram.", type: `function`},
{label: `plt.spring()`, displayLabel: `plt.spring()`, info: "spring():\nSet the colormap to 'spring'.", type: `function`},
{label: `plt.spy(Z)`, displayLabel: `plt.spy(Z[, precision, marker, markersize, ...])`, info: "spy(Z[, precision, marker, markersize, ...]):\nPlot the sparsity pattern of a 2D array.", type: `function`},
{label: `plt.stackplot(x)`, displayLabel: `plt.stackplot(x, *args[, labels, colors, ...])`, info: "stackplot(x, *args[, labels, colors, ...]):\nDraw a stacked area plot.", type: `function`},
{label: `plt.stairs(values)`, displayLabel: `plt.stairs(values[, edges, orientation, ...])`, info: "stairs(values[, edges, orientation, ...]):\nA stepwise constant function as a line with bounding edges or a filled plot.", type: `function`},
{label: `plt.stem()`, displayLabel: `plt.stem(*args[, linefmt, markerfmt, basefmt, ...])`, info: "stem(*args[, linefmt, markerfmt, basefmt, ...]):\nCreate a stem plot.", type: `function`},
{label: `plt.step(x, y)`, displayLabel: `plt.step(x, y, *args[, where, data])`, info: "step(x, y, *args[, where, data]):\nMake a step plot.", type: `function`},
{label: `plt.streamplot(x, y, u, v)`, displayLabel: `plt.streamplot(x, y, u, v[, density, linewidth, ...])`, info: "streamplot(x, y, u, v[, density, linewidth, ...]):\nDraw streamlines of a vector flow.", type: `function`},
{label: `plt.subplot()`, displayLabel: `plt.subplot(*args, **kwargs)`, info: "subplot(*args, **kwargs):\nAdd an Axes to the current figure or retrieve an existing Axes.", type: `function`},
{label: `plt.subplot2grid(shape, loc)`, displayLabel: `plt.subplot2grid(shape, loc[, rowspan, colspan, fig])`, info: "subplot2grid(shape, loc[, rowspan, colspan, fig]):\nCreate a subplot at a specific location inside a regular grid.", type: `function`},
{label: `plt.subplot_mosaic(mosaic)`, displayLabel: `plt.subplot_mosaic(mosaic, *[, sharex, sharey, ...])`, info: "subplot_mosaic(mosaic, *[, sharex, sharey, ...]):\nBuild a layout of Axes based on ASCII art or nested lists.", type: `function`},
{label: `plt.subplot_tool()`, displayLabel: `plt.subplot_tool([targetfig])`, info: "subplot_tool([targetfig]):\nLaunch a subplot tool window for a figure.", type: `function`},
{label: `plt.subplots()`, displayLabel: `plt.subplots([nrows, ncols, sharex, sharey, ...])`, info: "subplots([nrows, ncols, sharex, sharey, ...]):\nCreate a figure and a set of subplots.", type: `function`},
{label: `plt.subplots_adjust()`, displayLabel: `plt.subplots_adjust([left, bottom, right, top, ...])`, info: "subplots_adjust([left, bottom, right, top, ...]):\nAdjust the subplot layout parameters.", type: `function`},
{label: `plt.summer()`, displayLabel: `plt.summer()`, info: "summer():\nSet the colormap to 'summer'.", type: `function`},
{label: `plt.suptitle(t)`, displayLabel: `plt.suptitle(t, **kwargs)`, info: "suptitle(t, **kwargs):\nAdd a centered suptitle to the figure.", type: `function`},
{label: `plt.switch_backend(newbackend)`, displayLabel: `plt.switch_backend(newbackend)`, info: "switch_backend(newbackend):\nClose all open figures and set the Matplotlib backend.", type: `function`},
{label: `plt.table()`, displayLabel: `plt.table([cellText, cellColours, cellLoc, ...])`, info: "table([cellText, cellColours, cellLoc, ...]):\nAdd a table to an Axes.", type: `function`},
{label: `plt.text(x, y, s)`, displayLabel: `plt.text(x, y, s[, fontdict])`, info: "text(x, y, s[, fontdict]):\nAdd text to the Axes.", type: `function`},
{label: `plt.thetagrids()`, displayLabel: `plt.thetagrids([angles, labels, fmt])`, info: "thetagrids([angles, labels, fmt]):\nGet or set the theta gridlines on the current polar plot.", type: `function`},
{label: `plt.tick_params()`, displayLabel: `plt.tick_params([axis])`, info: "tick_params([axis]):\nChange the appearance of ticks, tick labels, and gridlines.", type: `function`},
{label: `plt.ticklabel_format(*)`, displayLabel: `plt.ticklabel_format(*[, axis, style, ...])`, info: "ticklabel_format(*[, axis, style, ...]):\nConfigure the ScalarFormatter used by default for linear axes.", type: `function`},
{label: `plt.tight_layout(*)`, displayLabel: `plt.tight_layout(*[, pad, h_pad, w_pad, rect])`, info: "tight_layout(*[, pad, h_pad, w_pad, rect]):\nAdjust the padding between and around subplots.", type: `function`},
{label: `plt.title(label)`, displayLabel: `plt.title(label[, fontdict, loc, pad, y])`, info: "title(label[, fontdict, loc, pad, y]):\nSet a title for the Axes.", type: `function`},
{label: `plt.tricontour()`, displayLabel: `plt.tricontour(*args, **kwargs)`, info: "tricontour(*args, **kwargs):\nDraw contour lines on an unstructured triangular grid.", type: `function`},
{label: `plt.tricontourf()`, displayLabel: `plt.tricontourf(*args, **kwargs)`, info: "tricontourf(*args, **kwargs):\nDraw contour regions on an unstructured triangular grid.", type: `function`},
{label: `plt.tripcolor()`, displayLabel: `plt.tripcolor(*args[, alpha, norm, cmap, vmin, ...])`, info: "tripcolor(*args[, alpha, norm, cmap, vmin, ...]):\nCreate a pseudocolor plot of an unstructured triangular grid.", type: `function`},
{label: `plt.triplot()`, displayLabel: `plt.triplot(*args, **kwargs)`, info: "triplot(*args, **kwargs):\nDraw a unstructured triangular grid as lines and/or markers.", type: `function`},
{label: `plt.twinx()`, displayLabel: `plt.twinx([ax])`, info: "twinx([ax]):\nMake and return a second axes that shares the x-axis.", type: `function`},
{label: `plt.twiny()`, displayLabel: `plt.twiny([ax])`, info: "twiny([ax]):\nMake and return a second axes that shares the y-axis.", type: `function`},
{label: `plt.uninstall_repl_displayhook()`, displayLabel: `plt.uninstall_repl_displayhook()`, info: "uninstall_repl_displayhook():\nUninstall the Matplotlib display hook.", type: `function`},
{label: `plt.violinplot(dataset)`, displayLabel: `plt.violinplot(dataset[, positions, vert, ...])`, info: "violinplot(dataset[, positions, vert, ...]):\nMake a violin plot.", type: `function`},
{label: `plt.viridis()`, displayLabel: `plt.viridis()`, info: "viridis():\nSet the colormap to 'viridis'.", type: `function`},
{label: `plt.vlines(x, ymin, ymax)`, displayLabel: `plt.vlines(x, ymin, ymax[, colors, linestyles, ...])`, info: "vlines(x, ymin, ymax[, colors, linestyles, ...]):\nPlot vertical lines at each x from ymin to ymax.", type: `function`},
{label: `plt.waitforbuttonpress()`, displayLabel: `plt.waitforbuttonpress([timeout])`, info: "waitforbuttonpress([timeout]):\nBlocking call to interact with the figure.", type: `function`},
{label: `plt.winter()`, displayLabel: `plt.winter()`, info: "winter():\nSet the colormap to 'winter'.", type: `function`},
{label: `plt.xcorr(x, y)`, displayLabel: `plt.xcorr(x, y[, normed, detrend, usevlines, ...])`, info: "xcorr(x, y[, normed, detrend, usevlines, ...]):\nPlot the cross correlation between x and y.", type: `function`},
{label: `plt.xkcd()`, displayLabel: `plt.xkcd([scale, length, randomness])`, info: "xkcd([scale, length, randomness]):\nTurn on xkcd sketch-style drawing mode.", type: `function`},
{label: `plt.xlabel(xlabel)`, displayLabel: `plt.xlabel(xlabel[, fontdict, labelpad, loc])`, info: "xlabel(xlabel[, fontdict, labelpad, loc]):\nSet the label for the x-axis.", type: `function`},
{label: `plt.xlim()`, displayLabel: `plt.xlim(*args, **kwargs)`, info: "xlim(*args, **kwargs):\nGet or set the x limits of the current axes.", type: `function`},
{label: `plt.xscale(value)`, displayLabel: `plt.xscale(value, **kwargs)`, info: "xscale(value, **kwargs):\nSet the x-axis scale.", type: `function`},
{label: `plt.xticks()`, displayLabel: `plt.xticks([ticks, labels])`, info: "xticks([ticks, labels]):\nGet or set the current tick locations and labels of the x-axis.", type: `function`},
{label: `plt.ylabel(ylabel)`, displayLabel: `plt.ylabel(ylabel[, fontdict, labelpad, loc])`, info: "ylabel(ylabel[, fontdict, labelpad, loc]):\nSet the label for the y-axis.", type: `function`},
{label: `plt.ylim()`, displayLabel: `plt.ylim(*args, **kwargs)`, info: "ylim(*args, **kwargs):\nGet or set the y-limits of the current axes.", type: `function`},
{label: `plt.yscale(value)`, displayLabel: `plt.yscale(value, **kwargs)`, info: "yscale(value, **kwargs):\nSet the y-axis scale.", type: `function`},
{label: `plt.yticks()`, displayLabel: `plt.yticks([ticks, labels])`, info: "yticks([ticks, labels]):\nGet or set the current tick locations and labels of the y-axis.", type: `function`},
]